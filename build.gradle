plugins {
    id 'distribution'
    id 'java' // ensure we have Java support
}

def versionFromGit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

version = versionFromGit()

tasks.named('distZip') {
    dependsOn(':imageto3dprint:installDist', ':loadstepwedge:installDist')
}

tasks.named('distTar') {
    dependsOn(':imageto3dprint:installDist', ':loadstepwedge:installDist')
}

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}

allprojects {
    version = rootProject.version
}

// Configure the root distribution to include subprojects' outputs
distributions {
    main {
        contents {
            into('bin') {
                from { project(':imageto3dprint').tasks.named('installDist').get().destinationDir.toPath().resolve('bin').toFile() }
                from { project(':loadstepwedge').tasks.named('installDist').get().destinationDir.toPath().resolve('bin').toFile() }
            }
            into('lib') {
                from { project(':imageto3dprint').tasks.named('installDist').get().destinationDir.toPath().resolve('lib').toFile() }
                from { project(':loadstepwedge').tasks.named('installDist').get().destinationDir.toPath().resolve('lib').toFile() }
            }
        }
    }
}

// Prevent duplicate files in `lib`
tasks.named('distTar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.named('distZip') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Generate a Version class at build time containing the current version
def generatedSourcesDir = layout.buildDirectory.dir("generated/src/main/java")

task generateVersionClass {
    inputs.property("version", project.version)
    outputs.dir(generatedSourcesDir)

    doLast {
        def outputDir = generatedSourcesDir.get().asFile
        outputDir.mkdirs()
        def versionFile = new File(outputDir, "net/bluevine/chromagica/Version.java")
        versionFile.parentFile.mkdirs()
        versionFile.text = """
            package net.bluevine.chromagica;

            public class Version {
                public static final String VERSION = "${project.version}";
            }
        """.stripIndent()
    }
}

// Add the generated source directory to the main source set
sourceSets.main.java.srcDir generatedSourcesDir

// Ensure the version class is generated before compilation
compileJava.dependsOn(generateVersionClass)
